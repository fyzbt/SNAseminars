V(g)$type <- FALSE
V(g)$type[V(g)$name %in% rownames(df)] <- TRUE
is.bipartite(g)
V(g)$type
df = read_csv("~/Downloads/Dataset2-Media-User-Example-EDGES.csv")
df_meta = read_csv("~/Downloads/Dataset2-Media-User-Example-NODES.csv")
g <- graph_from_data_frame(df, directed = F)
V(g)$type <- FALSE
V(g)$type[V(g)$name %in% rownames(df)] <- TRUE
is.bipartite(g)
V(g)$type
V(g)$type[V(g)$name %in% df$X1] <- TRUE
is.bipartite(g)
one_mode_networks <- bipartite_projection(g)
bipartite_projection(g)
V(g)$type
V(g)$name
df = read_csv("~/Downloads/Dataset2-Media-User-Example-EDGES.csv")
g <- graph_from_data_frame(df, directed = F)
g <- simplify(g, remove.multiple = F, remove.loops = T)
plot(g)
df = as.matrix(df)
df = read.csv("~/Downloads/Dataset2-Media-User-Example-EDGES.csv", row.names=1)
df_meta = read.csv("~/Downloads/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
df = as.matrix(df)
g = graph_from_data_frame(g, vertices=df_meta, directed=T)
plot(df)
g = graph_from_incidence_matrix(df, directed = F)
plot(df)
plot(g)
g_proj <- bipartite.projection(g_proj)
g_proj <- bipartite.projection(g)
plot(g_proj)
g_proj
plot(g_proj$proj2)
plot(g_proj$proj1)
plot(g_proj$proj1, vertex.label.color="black", vertex.label.dist=1,
vertex.size=7, vertex.label=df_meta$media[!is.na(df_meta$media.type)])
plot(g_proj$proj2, vertex.label.color="black", vertex.label.dist=1,
vertex.size=7, vertex.label=df_meta$media[ is.na(df_meta$media.type)])
plot(g, vertex.label=NA, vertex.size=7, layout=layout_as_bipartite)
plot(g, vertex.label=df_meta$media, vertex.size=7, layout=layout_as_bipartite)
plot(g, vertex.label=df_meta$media, vertex.size=6, layout=layout_as_bipartite)
plot(g_proj$proj2, vertex.label.color="black", vertex.label.dist=1,
vertex.size=7, vertex.label=df_meta$media[ is.na(df_meta$media.type)])
vertex_connectivity(g_proj$proj2, source = NULL, target = NULL, checks = TRUE)
vertex_connectivity(g_proj$proj1, source = NULL, target = NULL, checks = TRUE)
vertex_connectivity(g, source = NULL, target = NULL, checks = TRUE)
cohesive_blocks(g, labels = TRUE)
graphs_from_cohesive_blocks(g)
graphs_from_cohesive_blocks(g_proj$proj2)
graphs_from_cohesive_blocks(g_proj$proj2, labels=TRUE)
transitivity(g, type="global")
transitivity(g, type="local")
transitivity(g_proj$proj2, type="local")
transitivity(g_proj$proj2, type="global")
transitivity(g, type="global")
transitivity(g_proj, type="global")
transitivity(g, type="local")
plot(g, vertex.label=df_meta$media, vertex.size=6, layout=layout_as_bipartite)
transitivity(g_proj$proj2, type="local")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.size=7, vertex.label=df_meta$media[ is.na(df_meta$media.type)], vertex.size=trans)
users = g_proj$proj2
V(users)$trans = transitivity(g_proj$proj2, type="local")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.size=7, vertex.label=df_meta$media[ is.na(df_meta$media.type)], vertex.size=trans)
V(users)$trans
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.size=7, vertex.label=df_meta$media[ is.na(df_meta$media.type)], vertex.size=V(users)$trans)
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.size=7, vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users)$trans*100)
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users)$trans*100)
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users))
transitivity(g_proj$proj2, type="global")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
transitivity(g_proj$proj1, type="global")
media = g_proj$proj1
plot(media, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[! is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#ffe74d", vertex.frame.color="#ffe74d")
media = g_proj$proj1
V(media)$trans = transitivity(g_proj$proj1, type="local")
plot(media, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[! is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#ffe74d", vertex.frame.color="#ffe74d")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users)$trans, vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
transitivity(g_proj$proj2, type="global")
users = g_proj$proj2
V(users)$trans = transitivity(g_proj$proj2, type="local")
V(users)$trans
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users)$trans, vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users)$trans*40, vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users)$trans*10, vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
plot(users, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[ is.na(df_meta$media.type)],
vertex.size=V(users)$trans*10, vertex.color="#2b8fef", vertex.frame.color="#2b8fef")
transitivity(g_proj$proj1, type="global")
media = g_proj$proj1
V(media)$trans = transitivity(g_proj$proj1, type="local")
plot(media, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[! is.na(df_meta$media.type)],
vertex.size=V(users), vertex.color="#ffde8f", vertex.frame.color="#ffde8f")
plot(media, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[! is.na(df_meta$media.type)],
vertex.size=V(users)$trans, vertex.color="#ffde8f", vertex.frame.color="#ffde8f")
plot(media, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[! is.na(df_meta$media.type)],
vertex.size=V(users)$trans*10, vertex.color="#ffde8f", vertex.frame.color="#ffde8f")
plot(media, vertex.label.color="black", vertex.label.dist=1,
vertex.label=df_meta$media[! is.na(df_meta$media.type)],
vertex.size=V(users)$trans*10, vertex.color="#ffa7a7", vertex.frame.color="#ffa7a7")
transitivity(g_proj$proj1, type="global")
vertex_connectivity(g, source = NULL, target = NULL, checks = TRUE)
vertex_connectivity(g_proj$proj2, source = NULL, target = NULL, checks = TRUE)
vertex_connectivity(g_proj$proj1, source = NULL, target = NULL, checks = TRUE)
vertex_connectivity(g, source = NULL, target = NULL, checks = TRUE)
plot(g, vertex.label=df_meta$media, vertex.size=6, layout=layout_as_bipartite)
df_meta$type = "user"
df_meta$type[! is.na(df_meta$media.type)] = "media"
df_meta$type
V(g)$class = df_meta$type
cols = c("media"="#ff3902", "user"="#3b5b9d")
plot(g, vertex.label=df_meta$media, vertex.size=6, layout=layout_as_bipartite,  vertex.label.color="black", vertex.label.dist=1, vertex.color=cols)
V(g)$cols = cols
V(g)$cols
ggraph(g, layout = layout_as_bipartite) +
geom_edge_link(show.legend = TRUE, alpha = 0.4) +
geom_node_point(aes(color = affil), alpha = 0.9) +
#geom_node_text(aes(label = name), repel = TRUE, size=5) +
theme_void() +
scale_color_manual(values=cols) +
theme(legend.position="right", text=element_text(family="Times New Roman")) +
labs(title = "Degree Centrality on Multiplex Net", subtitle = "The bigger the node, the more one has links")
library(ggraph)
ggraph(g, layout = layout_as_bipartite) +
geom_edge_link(show.legend = TRUE, alpha = 0.4) +
geom_node_point(aes(color = affil), alpha = 0.9) +
#geom_node_text(aes(label = name), repel = TRUE, size=5) +
theme_void() +
scale_color_manual(values=cols) +
theme(legend.position="right", text=element_text(family="Times New Roman")) +
labs(title = "Degree Centrality on Multiplex Net", subtitle = "The bigger the node, the more one has links")
ggraph(g, layout = layout_as_bipartite) +
geom_edge_link(show.legend = TRUE, alpha = 0.4) +
geom_node_point(aes(color = affil), alpha = 0.9) +
#geom_node_text(aes(label = name), repel = TRUE, size=5) +
theme_void() +
scale_color_manual(values=cols)
ggraph(g, layout = "layout_as_bipartite") +
geom_edge_link(show.legend = TRUE, alpha = 0.4) +
geom_node_point(aes(color = affil), alpha = 0.9) +
#geom_node_text(aes(label = name), repel = TRUE, size=5) +
theme_void() +
scale_color_manual(values=cols)
plot(g, vertex.label=df_meta$media, vertex.size=6, layout=layout_as_bipartite,  vertex.label.color="black", vertex.label.dist=1, vertex.color=cols)
plot(g, vertex.label=df_meta$media, vertex.size=6, layout=layout_as_bipartite,  vertex.label.color="black", vertex.label.dist=1, vertex.color="#2b8fef")
library()
library(ggplot2)
library(dplyr)
mtcars = datasets::mtcars
View(mtcars)
na.omit(mtcars)
ggplot(data=na.omit(mtcars)) +
geom_point(aes(x=drat, y=wt))
ggplot(data=na.omit(mtcars)) +
geom_point(aes(x=drat, y=wt, label=rownames(mtcars)))
rownames(mtcars)
mtcars$class = rownames(mtcars)
ggplot(data=na.omit(mtcars)) +
geom_point(aes(x=drat, y=wt, label=class))
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, label=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>24,as.character(Name),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, label=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>0,as.character(Name),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, label=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>1,as.character(Name),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, label=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>1,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars)) +
geom_point(aes(x=drat, y=wt, label=class)) +
geom_text(aes(label=ifelse(drat>1,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars)) +
geom_point(aes(x=drat, y=wt, color=class,label=class)) +
geom_text(aes(label=ifelse(drat>1,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class,label=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>1,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>1,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars)) +
geom_point( aes(x=drat, y=wt, color=class)) +
geom_text(aes(label=ifelse(drat>1,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>2,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>2ю5,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>2.55,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>3.55,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>4,as.character(class),'')),hjust=0,vjust=0)
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class,label=ifelse(drat>4,as.character(class),''))) +
geom_point() +
geom_text(hjust=0,vjust=0)
mtcars = datasets::mtcars
mtcars$class =
#var1
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=class)) +
geom_point() +
geom_text(aes(label=ifelse(drat>4,as.character(rownames(mtcars)),'')),hjust=0,vjust=0)
mtcars$class =
#var1
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=rownames(mtcars))) +
geom_point() +
geom_text(aes(label=ifelse(drat>4,as.character(rownames(mtcars)),'')),hjust=0,vjust=0)
mtcars = datasets::mtcars
#var1
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=rownames(mtcars))) +
geom_point() +
geom_text(aes(label=ifelse(drat>4,as.character(rownames(mtcars)),'')),hjust=0,vjust=0)
#var2
ggplot(data=na.omit(mtcars), aes(x=drat, y=wt, color=rownames(mtcars),label=ifelse(drat>4,as.character(rownames(mtcars)),''))) +
geom_point() +
geom_text(hjust=0,vjust=0)
library(ggplot2)
library(lubridate)
ufo <- read.csv(url("https://stepik.org/media/attachments/lesson/48794/ufo_stepik.csv"))
ufo04 = ufo %>%
filter(year(Sighted)>2004 & !is.na(ufo$Shape))
library(dplyr)
ufo <- read.csv(url("https://stepik.org/media/attachments/lesson/48794/ufo_stepik.csv"))
ufo04 = ufo %>%
filter(year(Sighted)>2004 & !is.na(ufo$Shape))
ggplot(data = ufo) + geom_bar(aes(x = Shape)) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = ufo) + geom_bar(aes(x = Shape))
class(ufo$Shape)
ggplot(data = ufo) +
geom_bar(aes(x = Shape))
ggplot(data = ufo) +
geom_bar(aes(x = Shape)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = ufo) +
geom_bar(aes(x = Shape)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = ufo) +
geom_bar(aes(x = Shape))
table(ufo$Shape)
finance = read.csv(url("https://vk.com/away.php?utf=1&to=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vRjJ3-Vb4avMvHKxwTS6cO-BdLpRM8WDNHmRmv9Tzi6nIhNzzQmLglO7Iedp7_6sUgFgBppLqWQZgBt%2Fpub%3Fgid%3D0%26single%3Dtrue%26output%3Dcsv"))
finance = read.csv(url("https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2Fe%2F2PACX-1vRjJ3-Vb4avMvHKxwTS6cO-BdLpRM8WDNHmRmv9Tzi6nIhNzzQmLglO7Iedp7_6sUgFgBppLqWQZgBt%2Fpub%3Fgid%3D0%26single%3Dtrue%26output%3Dcsv"))
finance = read.csv(url("https://docs.google.com/spreadsheets/d/e/2PACX-1vRjJ3-Vb4avMvHKxwTS6cO-BdLpRM8WDNHmRmv9Tzi6nIhNzzQmLglO7Iedp7_6sUgFgBppLqWQZgBt/pub?gid=0&single=true&output=csv"))
library(igraph)
# фильтруем данные по размеру дегри и оставляем только узлы с дегри выше 20, это необходимо для того, чтобы сократить число узлов в сети и сократить ее размерность.
df.g = graph_from_adj_list(finance, mode = "all", duplicate = TRUE)
finance$type = NULL
# фильтруем данные по размеру дегри и оставляем только узлы с дегри выше 20, это необходимо для того, чтобы сократить число узлов в сети и сократить ее размерность.
df.g = graph_from_adj_list(finance, mode = "all", duplicate = TRUE)
# фильтруем данные по размеру дегри и оставляем только узлы с дегри выше 20, это необходимо для того, чтобы сократить число узлов в сети и сократить ее размерность.
df.g = graph_from_adj_list(finance, mode = "all")
finance
# фильтруем данные по размеру дегри и оставляем только узлы с дегри выше 20, это необходимо для того, чтобы сократить число узлов в сети и сократить ее размерность.
df.g = graph_from_data_frame(finance)
V(df.g)$Degree = igraph::degree(df.g)
l = layout_nicely(df.g)
V(df.g)$Degree = igraph::degree(df.g)
plot(df.g,
vertex.label=NA,
vertex.color="black",
vertex.size=0.9,
edge.width=0.5,
layout=l, mode="undirected")
degr_cent = centr_degree(df.g, mode = "total", loops = TRUE, normalized = TRUE)
degr_cent$centralization # получаем значение для сети
degr_cent$theoretical_max # значение для идеальной сети с таким же кол-вом узлов и ребер
library(info.centrality)
info_cent = info.centrality.vertex(df.g)
centralize(info_cent, normalized = FALSE)
close_cent = centralization.closeness(df.g, mode = "total", normalized = TRUE)
close_cent$centralization
close_cent$theoretical_max
node_cent = centralization.betweenness(df.g)
node_cent$centralization
node_cent$theoretical_max
edge_btw = edge_betweenness(df.g, e = E(df.g), directed = FALSE, weights = NULL)
edge_cent = centralize(edge_btw, normalized = FALSE)
edge_cent # не нормализованные значения
degr_cent = centr_degree(df.g, mode = "total", loops = TRUE, normalized = TRUE)
degr_cent$centralization # получаем значение для сети
degr_cent$theoretical_max # значение для идеальной сети с таким же кол-вом узлов и ребер
edge_btw = edge_betweenness(df.g, e = E(df.g), directed = FALSE, weights = NULL)
edge_cent = centralize(edge_btw, normalized = FALSE)
edge_cent # не нормализованные значения
V(df.g)$Degree = igraph::degree(df.g)
coul = "lightblue"
set.seed(250)
plot(df.g,
vertex.label=NA,
vertex.color=coul,
vertex.size=abs(V(df.g)$Degree)*0.3,
edge.width=0.5,
layout=l, mode="undirected")
plot(df.g,
vertex.label=NA,
vertex.color=coul,
vertex.size=abs(V(df.g)$Degree)*10,
edge.width=0.5,
layout=l, mode="undirected")
plot(df.g,
vertex.label=NA,
vertex.color=coul,
vertex.size=abs(V(df.g)$Degree)*1,
edge.width=0.5,
layout=l, mode="undirected")
l = layout_nicely(df.g)
plot(df.g, layout=l,edge.width=0.7,edge.arrow.size=0.2,
vertex.label = V(df.g)$name,
vertex.label.font=1,vertex.label.dist=1,vertex.label.color="black",vertex.label.cex=0.9,
vertex.size=3)
plot(df.g, layout=l,edge.width=0.7,edge.arrow.size=0.2,
vertex.label = V(df.g)$name,vertex.size=abs(V(df.g)$Degree)*1,
vertex.label.font=1,vertex.label.dist=1,vertex.label.color="black",vertex.label.cex=0.9,
vertex.size=3)
ptable = as.data.frame(cbind(degree(df.g), closeness(df.g), betweenness(df.g), round(evcent(df.g)$vector, 3)))
titles = c("Degree", "Closeness", "Betweenness", "Eigenvector")
colnames(ptable) = titles
ptable$names = rownames(ptable)
View(ptable)
library(ggplot2)
library(dplyr)
library(readr)
df_counts = read_csv("/Users/macbook/icorating/sentiment_analysis/news_counts.csv")
View(df_counts)
color=currency))+
geom_point()
ggplot(filter(df_counts,
aes(x=date,
y=id,
color=currency))+
geom_point()
ggplot(df_counts,
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_point()
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line()
df_counts = df_counts %>%
filter(date >= "2017-07-01")
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions")
df_counts = df_counts %>%
filter(date >= "2017-07-01")
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions")
df_counts = df_counts %>%
filter(date >= "2018-07-01")
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions")
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "2 weeks", date_labels =  "%Y-%m-%d")
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d")
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
df_counts_trx = df_counts %>%
filter(currency == "TRX")
ggplot(df_counts_trx, aes(x=date,y=id), color="#5292ff") +
geom_line() +
ggtitle("Dynamics of TRON news mentions") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
df_counts_trx = df_counts %>%
filter(currency == "TRX")
ggplot(df_counts_trx, aes(x=date,y=id), color="#5292ff") +
geom_line() +
ggtitle("Dynamics of TRON news mentions") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
df_counts_trx = df_counts %>%
filter(currency == "TRX")
ggplot(df_counts_trx, aes(x=date,y=id), fill="#5292ff") +
geom_line() +
ggtitle("Dynamics of TRON news mentions") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
ggplot(df_counts_trx, aes(x=date,y=id)) +
geom_line(fill="#5292ff") +
ggtitle("Dynamics of TRON news mentions") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
ggplot(df_counts_trx, aes(x=date,y=id)) +
geom_line(color="#5292ff") +
ggtitle("Dynamics of TRON news mentions") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
ggplot(df_counts_trx, aes(x=date,y=id)) +
geom_line(color="#5292ff") +
ggtitle("Dynamics of TRON news mentions") +
xlab("Date") +
ylab("Count of mentions") +
scale_x_date(date_breaks = "3 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
ggplot(df_counts, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions per day") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
df_counts_trx = df_counts %>%
filter(currency == "TRX")
ggplot(df_counts_trx, aes(x=date,y=id)) +
geom_line(color="#5292ff") +
ggtitle("Dynamics of TRON news mentions") +
xlab("Date") +
ylab("Count of mentions per day") +
scale_x_date(date_breaks = "3 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
str(df_counts$id)
summary(df_counts$id)
df_counts_no_outl = df_counts %>%
filter(currency != "BTC" & currency != "ETH")
df_counts_no_outl = df_counts %>%
filter(currency != "BTC" & currency != "ETH")
ggplot(df_counts_no_outl, aes(x=date,y=id, color=currency)) +
geom_line() +
ggtitle("News mentions of top-10 coins by marketcap") +
xlab("Date") +
ylab("Count of mentions per day") +
scale_x_date(date_breaks = "4 weeks", date_labels =  "%Y-%m-%d") +
theme_minimal()
median(df_counts_trx$id)
setwd("~/SNAseminars")
library(readr)
library(igraph)
library(ggplot2)
library(dplyr)
install.packages("ergm")
